{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAAUC,EAASC,GACjCL,EACDI,EAAQ,C,SAACN,E,MAAUC,IAGnBM,EAAO,C,SAACP,E,MAAUC,G,IAUxB,MAAMO,EAAoBC,SAASC,cAAc,qBAC3CC,EAAmBF,SAASC,cAAc,oBAC1CE,EAAuBH,SAASC,cAAc,sBAC9CG,EAASJ,SAASC,cAAc,QAEtCG,EAAOC,iBAAiB,UAAWC,IACjCA,EAAEC,iBACFH,EAAOI,QACPC,YAAW,KACTnB,EAAc,EAAGS,EAAkBW,OACpCC,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBoB,EAAAxB,GAASyB,OAAOC,QAAQ,uBAAqBvB,QAAiBC,MAAW,CAAGuB,QAAS,KAAM,IAE5FC,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBoB,EAAAxB,GAASyB,OAAOI,QAAQ,sBAAoB1B,QAAiBC,MAAW,CAAGuB,QAAS,KAAM,IAI1F,IAAI,IAAIG,EAAI,EAAGA,EAAEf,EAAqBO,MAAOQ,IAC3CT,YAAW,KACTnB,EAAc4B,EAAE,EAAGC,SAASpB,EAAkBW,OAASS,SAASjB,EAAiBQ,OAASQ,GACjGP,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACfoB,EAAAxB,GAASyB,OAAOC,QAAQ,uBAAqBvB,QAAiBC,MAAW,CAAGuB,QAAS,KAAM,IAE5FC,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBoB,EAAAxB,GAASyB,OAAOI,QAAQ,sBAAoB1B,QAAeC,MAAW,CAAGuB,QAAS,KAAM,GACxF,GACKb,EAAiBQ,MAAQQ,EAAE,GAE/BnB,EAAkBW,MAAM","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  \n  return new Promise(function (resolve, reject) {\n    if(shouldResolve){\n      resolve({position, delay})\n    }\n    else{\n      reject({position, delay})\n    }\n  })\n\n  \n  \n}\n\n\n\nconst firstDelayInputEL = document.querySelector('input[name=delay]')\nconst delayStepInputEL = document.querySelector('input[name=step]')\nconst promiseAmountInputEL = document.querySelector('input[name=amount]')\nconst formEl = document.querySelector('form')\n\nformEl.addEventListener('submit', (e)=>{\n  e.preventDefault()\n  formEl.reset()\n  setTimeout(() =>{\n    createPromise(1, firstDelayInputEL.value)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {timeout: 3000});\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {timeout: 3000});\n  });\n\n\n    for(let i = 1; i<promiseAmountInputEL.value; i++){\n      setTimeout(() =>{\n        createPromise(i+1, parseInt(firstDelayInputEL.value) + parseInt(delayStepInputEL.value) * i)\n.then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {timeout: 3000});\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {timeout: 3000});\n  });\n      }, delayStepInputEL.value * i)\n    }\n  }, firstDelayInputEL.value)\n})"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","$47d4ff9957288465$var$firstDelayInputEL","document","querySelector","$47d4ff9957288465$var$delayStepInputEL","$47d4ff9957288465$var$promiseAmountInputEL","$47d4ff9957288465$var$formEl","addEventListener","e","preventDefault","reset","setTimeout","value","then","$parcel$interopDefault","Notify","success","timeout","catch","failure","i","parseInt"],"version":3,"file":"03-promises.e02dcda6.js.map"}